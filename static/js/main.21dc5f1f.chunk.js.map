{"version":3,"sources":["app/hooks.ts","images/poke_logo.svg","components/Header/Header.tsx","api/api.ts","features/listOfPokemons/listOfPokemonsSlice.ts","features/pokemonsDataToDisplay/pokemonsDataToDisplay.ts","components/PokemonCard/PokemonCard.tsx","components/Loading/Loading.tsx","components/PokemonCardList/PokemonCardList.tsx","components/PokemonCardListControllBar/PokemonCardListControllBar.tsx","app/common.ts","App.tsx","app/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","Header","Container","sx","mt","mb","Box","width","height","Paper","elevation","backgroundImage","Logo","backgroundSize","backgroundRepeat","backgroundPosition","axios","defaults","baseURL","fetchListOfPokemons","pokemonType","get","fetchAsyncListOfPokemons","createAsyncThunk","pokemonsType","a","result","length","response","data","results","pokeType","treatedResponse","pokemon","map","name","url","filter","el","i","arr","findIndex","check","listOfPokemonsSlice","createSlice","initialState","pokemonsList","reducers","setPokemonsType","state","action","payload","extraReducers","builder","addCase","fulfilled","actions","getPokemonsList","listOfPokemons","getPokemonTypes","pokemonsDataToDisplaySlice","filterQuery","qtyPerPage","setFilterQuery","setQtyPerPage","getFilterQuery","pokemonsDataToDisplay","getQtyPerPage","colorForType","normal","fighting","flying","poison","ground","rock","bug","ghost","steel","fire","water","grass","electric","psychic","ice","dragon","dark","fairy","unknown","shadow","PokemonCard","types","image","hp","attack","defense","specialAttack","specialDefense","speed","weight","useState","expanded","setExpanded","Grid","item","xs","md","lg","Card","CardMedia","component","alt","title","CardContent","Typography","gutterBottom","variant","textAlign","Stack","direction","spacing","justifyContent","type","Chip","label","size","bgcolor","nanoid","color","Button","onClick","Collapse","in","timeout","unmountOnExit","p","Loading","LinearProgress","PokemonCardList","pokemonsListFromServer","pokemonsPerPage","page","setPage","pageQty","setPageQty","filteredByName","setFilteredByName","pokemonsToDisplayData","setPokemonsToDisplayData","isLoading","setIsLoading","useEffect","preparedList","includes","Math","floor","preparedPokemonsToDisplay","slice","listOfDataToDisplay","pokemonName","id","moves","move","sprites","front_default","stats","base_stat","alignItems","Pagination","count","shape","onChange","event","value","container","PokemonCardListControllBar","dispatch","typesList","setTypesList","selectedTypesList","setSelectedTypesList","setPokemonsPerPage","query","setQuery","debounceDispatchQuery","useCallback","f","delay","timer","clearTimeout","args","setTimeout","debounce","typeIndex","split","listOfTypesFromServer","FormControl","m","TextField","target","FormHelperText","InputLabel","Select","labelId","multiple","input","OutlinedInput","MenuItem","App","pokemonsTypes","className","store","configureStore","reducer","listOfPokemonsReducer","pokemonsDataToDisplayReducer","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.21dc5f1f.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","export default __webpack_public_path__ + \"static/media/poke_logo.3e1660a9.svg\";","import { Box, Container, Paper } from '@mui/material'\nimport React from 'react'\nimport Logo from '../../images/poke_logo.svg'\n\nconst Header: React.FC = () => {\n  return (\n    <Container sx={{ mt: 4, mb: 4 }}>\n      <Box\n        sx={{\n          width: '100%',\n          height: 120,\n        }}\n      >\n        <Paper\n          elevation={0}\n          sx={{\n            width: '100%',\n            height: '100%',\n            backgroundImage: `url(${Logo})`,\n            backgroundSize: 'contain',\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n          }}\n        />\n      </Box>\n    </Container>\n  )\n}\n\nexport default Header\n","import axios from 'axios'\n\naxios.defaults.baseURL = 'https://pokeapi.co/api/v2/'\n\nexport const fetchListOfPokemons = (pokemonType: string = '') => {\n  if (pokemonType) {\n    return axios.get(`type/${pokemonType}`)\n  } else {\n    return axios.get('pokemon/?offset=0&limit=1200')\n  }\n}\n\nexport const fetchTypesList = () => axios.get('type/')\n\nexport const fetchPokemonStats = (pokemonName: string) => axios.get(`pokemon/${pokemonName}`)\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { fetchListOfPokemons } from '../../api/api'\nimport { RootState } from '../../app/store'\nimport { listOfPokemonsState, PokemonFromFetchingByType } from '../../types/pokemon.model'\n\nconst initialState: listOfPokemonsState = {\n  pokemonsList: [],\n  pokemonsType: [],\n}\n\nexport const fetchAsyncListOfPokemons = createAsyncThunk(\n  'articles/fetchAsyncListOfPokemons',\n  async (pokemonsType: string[]) => {\n    let result: any[] = []\n\n    if (pokemonsType.length === 0) {\n      const response = await fetchListOfPokemons()\n      result = [...response.data.results]\n    } else {\n      for (const pokeType of pokemonsType) {\n        const response = await fetchListOfPokemons(pokeType)\n        const treatedResponse = response.data.pokemon.map((pokemon: PokemonFromFetchingByType) => (\n          {\n            name: pokemon.pokemon.name,\n            url: pokemon.pokemon.url,\n          }\n        ))\n        result = (result.length === 0) ? [...treatedResponse] : [...result, ...treatedResponse]\n      }\n    }\n\n    return result.filter((el, i, arr) => i === arr.findIndex(check => check.name === el.name))\n  },\n)\n\nexport const listOfPokemonsSlice = createSlice({\n  name: 'listOfPokemons',\n  initialState,\n  reducers: {\n    setPokemonsType: (state, action) => {\n      state.pokemonsType = action.payload\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchAsyncListOfPokemons.fulfilled, (state, action) => {\n        state.pokemonsList = action.payload\n      })\n  },\n})\n\nexport const { setPokemonsType } = listOfPokemonsSlice.actions\nexport const getPokemonsList = (state: RootState) => state.listOfPokemons.pokemonsList\nexport const getPokemonTypes = (state: RootState) => state.listOfPokemons.pokemonsType\n\nexport default listOfPokemonsSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport { PokemonsDataToDisplayState } from '../../types/pokemon.model'\n\nconst initialState: PokemonsDataToDisplayState = {\n  filterQuery: '',\n  qtyPerPage: 10,\n}\n\nexport const pokemonsDataToDisplaySlice = createSlice({\n  name: 'pokemonsDataToDisplay',\n  initialState,\n  reducers: {\n    setFilterQuery: (state, action) => {\n      state.filterQuery = action.payload\n    },\n    setQtyPerPage: (state, action) => {\n      state.qtyPerPage = action.payload\n    },\n  },\n})\n\nexport const { setFilterQuery, setQtyPerPage } = pokemonsDataToDisplaySlice.actions\nexport const getFilterQuery = (state: RootState) => state.pokemonsDataToDisplay.filterQuery\nexport const getQtyPerPage = (state: RootState) => state.pokemonsDataToDisplay.qtyPerPage\n\nexport default pokemonsDataToDisplaySlice.reducer\n","import { Button, Card, CardContent, CardMedia, Chip, Collapse, Grid, Stack, Typography } from '@mui/material'\nimport React, { useState } from 'react'\nimport { pokemonData } from '../../types/pokemon.model'\nimport { nanoid } from 'nanoid'\n\ntype Props = {\n  data: pokemonData;\n};\n\nconst colorForType: { [key: string] : string } = {\n  normal: '#a4acaf',\n  fighting: '#d56723',\n  flying: '#3dc7ef',\n  poison: '#b97fc9',\n  ground: '#ab9842',\n  rock: '#a38c21',\n  bug: '#729f3f',\n  ghost: '#51c4e7',\n  steel: '#9eb7b8',\n  fire: '#fd7d24',\n  water: '#4592c4',\n  grass: '#9bcc50',\n  electric: '#eed535',\n  psychic: '#f366b9',\n  ice: '#51c4e7',\n  dragon: '#f16e57',\n  dark: '#707070',\n  fairy: '#fdb9e9',\n  unknown: '#ffffff',\n  shadow: '#ffffff',\n}\n\nconst PokemonCard: React.FC<Props> = ({ data }) => {\n  const { name, types, image, hp, attack, defense, specialAttack, specialDefense, speed, weight } = data\n  const [expanded, setExpanded] = useState(false)\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded)\n  }\n\n  return (\n    <>\n      <Grid item xs={12} md={4} lg={3}>\n        <Card>\n          <CardMedia\n            component=\"img\"\n            height=\"240px\"\n            image={image}\n            alt={name}\n            title={name}\n          />\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"div\" textAlign='center'>\n              {name}\n            </Typography>\n            <Stack direction=\"row\" spacing={1} sx={{ mb: 1 }} justifyContent=\"center\">\n              {types.map(type => (<Chip label={type} size=\"small\" key={nanoid()} sx={{ bgcolor: `${colorForType[type]}` }}/>))}\n            </Stack>\n            <Typography\n              variant=\"body2\"\n              color=\"text.secondary\"\n              gutterBottom\n            >\n              HP: {hp}\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              color=\"text.secondary\"\n              gutterBottom\n            >\n              Attack: {attack}\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              color=\"text.secondary\"\n              gutterBottom\n            >\n              Defense: {defense}\n            </Typography>\n            <Button\n              onClick={handleExpandClick}\n            >\n              more stats\n            </Button>\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n              <CardContent sx={{ p: 0 }}>\n                <Typography\n                  variant=\"body2\"\n                  color=\"text.secondary\"\n                  gutterBottom\n                >\n                  Special Attack: {specialAttack}\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  color=\"text.secondary\"\n                  gutterBottom\n                >\n                  Special Defense: {specialDefense}\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  color=\"text.secondary\"\n                  gutterBottom\n                >\n                  Speed: {speed}\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  color=\"text.secondary\"\n                  gutterBottom\n                >\n                  Weight: {weight}\n                </Typography>\n              </CardContent>\n            </Collapse>\n          </CardContent>\n        </Card>\n      </Grid>\n    </>\n  )\n}\n\nexport default PokemonCard\n","import { Box, LinearProgress } from '@mui/material'\nimport React from 'react'\n\nconst Loading: React.FC = () => {\n  return (\n    <Box sx={{ width: '100%' }}>\n      <LinearProgress />\n    </Box>\n  )\n}\n\nexport default Loading\n","import React, { useEffect, useState } from 'react'\n\nimport { Container, Grid, Pagination, Stack } from '@mui/material'\nimport { useAppSelector } from '../../app/hooks'\nimport { getPokemonsList } from '../../features/listOfPokemons/listOfPokemonsSlice'\nimport { getFilterQuery, getQtyPerPage } from '../../features/pokemonsDataToDisplay/pokemonsDataToDisplay'\nimport { pokemonData, pokemonListItem } from '../../types/pokemon.model'\nimport { fetchPokemonStats } from '../../api/api'\nimport PokemonCard from '../PokemonCard/PokemonCard'\nimport Loading from '../Loading/Loading'\n\nconst PokemonCardList: React.FC = () => {\n  const filterQuery = useAppSelector(getFilterQuery)\n  const pokemonsListFromServer = useAppSelector(getPokemonsList)\n  const pokemonsPerPage = useAppSelector(getQtyPerPage)\n\n  const [page, setPage] = useState(1)\n  const [pageQty, setPageQty] = useState(0)\n  const [filteredByName, setFilteredByName] = useState(pokemonsListFromServer)\n  const [pokemonsToDisplayData, setPokemonsToDisplayData] = useState<pokemonData[] | []>([])\n  const [isLoading, setIsLoading] = useState(false)\n\n  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\n    setPage(value)\n  }\n\n  useEffect(() => {\n    const preparedList = pokemonsListFromServer.filter((pokemon: pokemonListItem) => pokemon.name.includes(filterQuery))\n    setFilteredByName(preparedList)\n    setPageQty(Math.floor(preparedList.length / pokemonsPerPage))\n    setPage(1)\n  }, [pokemonsListFromServer, filterQuery, pokemonsPerPage])\n\n  useEffect(async () => {\n    setIsLoading(!isLoading)\n    const preparedPokemonsToDisplay = filteredByName.slice(((page - 1) * pokemonsPerPage), ((page - 1) * pokemonsPerPage + pokemonsPerPage))\n\n    let listOfDataToDisplay: any[] = []\n\n    for (const pokemon of preparedPokemonsToDisplay) {\n      const response = await fetchPokemonStats(pokemon.name)\n      listOfDataToDisplay = [...listOfDataToDisplay, response.data]\n    }\n\n    listOfDataToDisplay = listOfDataToDisplay.map(pokemon => ({\n      id: pokemon.id,\n      name: pokemon.name,\n      types: pokemon.types.map((type) => type.type.name),\n      moves: pokemon.moves.map((move) => move.move.name),\n      image: pokemon.sprites.front_default,\n      hp: pokemon.stats[0].base_stat,\n      attack: pokemon.stats[1].base_stat,\n      defense: pokemon.stats[2].base_stat,\n      specialAttack: pokemon.stats[3].base_stat,\n      specialDefense: pokemon.stats[4].base_stat,\n      speed: pokemon.stats[5].base_stat,\n      weight: pokemon.weight,\n    }))\n\n    setPokemonsToDisplayData(listOfDataToDisplay)\n    setIsLoading(false)\n  }, [page, pokemonsPerPage, filteredByName])\n\n  return (\n    <>\n    <Container>\n      <Stack\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        spacing={0}\n      >\n        <Pagination\n          count={pageQty}\n          page={page}\n          color=\"primary\"\n          size=\"large\"\n          shape=\"rounded\"\n          variant=\"outlined\"\n          onChange={handleChange}\n        />\n      </Stack>\n      <Grid container\n        spacing={1}\n        sx={{ p: '45px' }}\n      >\n        {isLoading ? <Loading /> : pokemonsToDisplayData.map((pokemon: pokemonData) => (<PokemonCard key={pokemon.id} data={pokemon} />))}\n      </Grid>\n    </Container>\n    </>\n  )\n}\n\nexport default PokemonCardList\n","import React, { ChangeEvent, useCallback, useEffect, useState } from 'react'\nimport { Container, FormControl, FormHelperText, Grid, InputLabel, MenuItem, OutlinedInput, Select, SelectChangeEvent, TextField } from '@mui/material'\nimport { fetchTypesList } from '../../api/api'\nimport { setPokemonsType } from '../../features/listOfPokemons/listOfPokemonsSlice'\nimport { useAppDispatch } from '../../app/hooks'\nimport { setFilterQuery, setQtyPerPage } from '../../features/pokemonsDataToDisplay/pokemonsDataToDisplay'\nimport { debounce } from '../../app/common'\nimport { TypeFormServer } from '../../types/pokemon.model'\n\nconst PokemonCardListControllBar: React.FC = () => {\n  const dispatch = useAppDispatch()\n\n  const [typesList, setTypesList] = useState<TypeFormServer[]>([])\n  const [selectedTypesList, setSelectedTypesList] = useState<string[]>([])\n  const [pokemonsPerPage, setPokemonsPerPage] = useState(10)\n  const [query, setQuery] = useState('')\n\n  const typeSelectorHandler = (event: SelectChangeEvent<string[]>) => {\n    setSelectedTypesList(event.target.value)\n    dispatch(setPokemonsType(event.target.value))\n  }\n\n  const paginationSelectorHandler = (event: SelectChangeEvent<number>) => {\n    setPokemonsPerPage(+event.target.value)\n    dispatch(setQtyPerPage(+event.target.value))\n  }\n\n  const dispatchQuery = (query: string) => {\n    dispatch(setFilterQuery(query))\n  }\n\n  const debounceDispatchQuery = useCallback(\n    debounce(dispatchQuery, 300),\n    [])\n\n  const inputQueryHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n    debounceDispatchQuery(event.target.value)\n  }\n\n  useEffect(async () => {\n    const response = await fetchTypesList()\n    const listOfTypesFromServer = await response.data.results.map((item: TypeFormServer) => (\n      {\n        name: item.name,\n        typeIndex: item.url.split('/').slice(-2, -1),\n      }\n    ))\n\n    setTypesList(listOfTypesFromServer)\n  },\n  [])\n\n  return (\n    <>\n      <Container>\n        <Grid container spacing={2}>\n          <Grid item xs={12} md={6}>\n            <FormControl sx={{ m: 1, width: '100%' }} >\n              <TextField\n                id=\"standard-basic\"\n                label=\"Search by name\"\n                onChange={inputQueryHandler}\n                value={query}\n              />\n              <FormHelperText>\n                Filter pokemons by name\n              </FormHelperText>\n            </FormControl>\n          </Grid>\n          <Grid item xs={6} md={4}>\n            <FormControl sx={{ m: 1, width: '100%' }}>\n              <InputLabel id=\"inputTypeSelectLabel\">\n                Type\n              </InputLabel>\n              <Select\n                labelId=\"inputTypeSelectLabel\"\n                id=\"inputTypeSelect\"\n                multiple\n                value={selectedTypesList}\n                label=\"Type\"\n                input={<OutlinedInput label=\"Type\" />}\n                onChange={typeSelectorHandler}\n              >\n                {typesList.map(({ name }) => (\n                  <MenuItem value={name} key={name}>\n                    {name}\n                  </MenuItem>\n                ))\n                }\n              </Select>\n              <FormHelperText>\n                Filter pokemons by type\n              </FormHelperText>\n            </FormControl>\n          </Grid>\n          <Grid item xs={6} md={2}>\n            <FormControl sx={{ m: 1, width: '100%' }}>\n              <InputLabel id=\"labelForPaginationSelect\">\n                Pokemons per page\n              </InputLabel>\n              <Select\n                labelId=\"labelForPaginationSelect\"\n                id=\"PaginationSelect\"\n                value={pokemonsPerPage}\n                label=\"PokemonsPerPage\"\n                onChange={paginationSelectorHandler}\n              >\n                <MenuItem value={10} >\n                  10\n                </MenuItem>\n                <MenuItem value={20} >\n                  20\n                </MenuItem>\n                <MenuItem value={50} >\n                  50\n                </MenuItem>\n              </Select>\n              <FormHelperText>\n                Pokemons per page\n              </FormHelperText>\n            </FormControl>\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  )\n}\n\nexport default PokemonCardListControllBar\n","export function debounce (f: { (query: string): void; (...args: any[]): void; }, delay: number) {\n  let timer: ReturnType<typeof setTimeout>\n\n  return (...args: any[]) => {\n    clearTimeout(timer)\n\n    timer = setTimeout(f, delay, ...args)\n  }\n}\n","import React, { useEffect } from 'react'\nimport { useAppDispatch, useAppSelector } from './app/hooks'\nimport Header from './components/Header/Header'\nimport PokemonCardList from './components/PokemonCardList/PokemonCardList'\nimport PokemonCardListControllBar from './components/PokemonCardListControllBar/PokemonCardListControllBar'\nimport { fetchAsyncListOfPokemons, getPokemonTypes } from './features/listOfPokemons/listOfPokemonsSlice'\n\nfunction App () {\n  const pokemonsTypes = useAppSelector(getPokemonTypes)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchAsyncListOfPokemons(pokemonsTypes))\n  }, [dispatch, pokemonsTypes])\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <PokemonCardListControllBar />\n      <PokemonCardList />\n    </div>\n  )\n}\n\nexport default App\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport listOfPokemonsReducer from '../features/listOfPokemons/listOfPokemonsSlice'\nimport pokemonsDataToDisplayReducer from '../features/pokemonsDataToDisplay/pokemonsDataToDisplay'\n\nexport const store = configureStore({\n  reducer: {\n    listOfPokemons: listOfPokemonsReducer,\n    pokemonsDataToDisplay: pokemonsDataToDisplayReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport CssBaseline from '@mui/material/CssBaseline'\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}