{"version":3,"sources":["app/hooks.ts","api/api.ts","features/listOfPokemons/listOfPokemonsSlice.ts","features/pokemonsDataToDisplay/pokemonsDataToDisplay.ts","components/PokemonCard/PokemonCard.tsx","components/PokemonCardList/PokemonCardList.tsx","components/PokemonCardListControllBar/PokemonCardListControllBar.tsx","app/common.ts","App.tsx","app/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","axios","defaults","baseURL","fetchListOfPokemons","pokemonType","get","fetchAsyncListOfPokemons","createAsyncThunk","pokemonsType","a","result","length","response","data","results","pokeType","treatedResponse","pokemon","map","name","url","filter","el","i","arr","findIndex","check","listOfPokemonsSlice","createSlice","initialState","pokemonsList","reducers","setPokemonsType","state","action","payload","extraReducers","builder","addCase","fulfilled","actions","getPokemonsList","listOfPokemons","getPokemonTypes","pokemonsDataToDisplaySlice","filterQuery","qtyPerPage","setFilterQuery","setQtyPerPage","getFilterQuery","pokemonsDataToDisplay","getQtyPerPage","colorForType","normal","fighting","flying","poison","ground","rock","bug","ghost","steel","fire","water","grass","electric","psychic","ice","dragon","dark","fairy","unknown","shadow","PokemonCard","types","image","hp","attack","defense","specialAttack","specialDefense","speed","weight","useState","expanded","setExpanded","Grid","item","xs","md","lg","Card","CardMedia","component","height","alt","title","CardContent","Typography","gutterBottom","variant","Stack","direction","spacing","sx","mb","type","Chip","label","size","bgcolor","nanoid","color","Button","onClick","Collapse","in","timeout","unmountOnExit","PokemonCardList","pokemonsListFromServer","pokemonsPerPage","page","setPage","pageQty","setPageQty","filteredByName","setFilteredByName","pokemonsToDisplayData","setPokemonsToDisplayData","useEffect","preparedList","includes","Math","floor","preparedPokemonsToDisplay","slice","listOfDataToDisplay","pokemonName","id","moves","move","sprites","front_default","stats","base_stat","Container","justifyContent","alignItems","Pagination","count","shape","onChange","event","value","container","p","PokemonCardListControllBar","dispatch","typesList","setTypesList","selectedTypesList","setSelectedTypesList","setPokemonsPerPage","query","setQuery","debounceDispatchQuery","useCallback","f","delay","timer","clearTimeout","args","setTimeout","debounce","typeIndex","split","listOfTypesFromServer","FormControl","m","width","TextField","target","FormHelperText","InputLabel","Select","labelId","multiple","input","OutlinedInput","MenuItem","App","pokemonsTypes","className","store","configureStore","reducer","listOfPokemonsReducer","pokemonsDataToDisplayReducer","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.e72e839d.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import axios from 'axios'\n\naxios.defaults.baseURL = 'https://pokeapi.co/api/v2/'\n\nexport const fetchListOfPokemons = (pokemonType: string = '') => {\n  if (pokemonType) {\n    return axios.get(`type/${pokemonType}`)\n  } else {\n    return axios.get('pokemon/?offset=0&limit=1200')\n  }\n}\n\nexport const fetchTypesList = () => axios.get('type/')\n\nexport const fetchPokemonStats = (pokemonName: string) => axios.get(`pokemon/${pokemonName}`)\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { fetchListOfPokemons } from '../../api/api'\nimport { RootState } from '../../app/store'\nimport { listOfPokemonsState, PokemonFromFetchingByType } from '../../types/pokemon.model'\n\nconst initialState: listOfPokemonsState = {\n  pokemonsList: [],\n  pokemonsType: [],\n}\n\nexport const fetchAsyncListOfPokemons = createAsyncThunk(\n  'articles/fetchAsyncListOfPokemons',\n  async (pokemonsType: string[]) => {\n    let result: any[] = []\n\n    if (pokemonsType.length === 0) {\n      const response = await fetchListOfPokemons()\n      result = [...response.data.results]\n    } else {\n      for (const pokeType of pokemonsType) {\n        const response = await fetchListOfPokemons(pokeType)\n        const treatedResponse = response.data.pokemon.map((pokemon: PokemonFromFetchingByType) => (\n          {\n            name: pokemon.pokemon.name,\n            url: pokemon.pokemon.url,\n          }\n        ))\n        result = (result.length === 0) ? [...treatedResponse] : [...result, ...treatedResponse]\n      }\n    }\n\n    return result.filter((el, i, arr) => i === arr.findIndex(check => check.name === el.name))\n  },\n)\n\nexport const listOfPokemonsSlice = createSlice({\n  name: 'listOfPokemons',\n  initialState,\n  reducers: {\n    setPokemonsType: (state, action) => {\n      state.pokemonsType = action.payload\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchAsyncListOfPokemons.fulfilled, (state, action) => {\n        state.pokemonsList = action.payload\n      })\n  },\n})\n\nexport const { setPokemonsType } = listOfPokemonsSlice.actions\nexport const getPokemonsList = (state: RootState) => state.listOfPokemons.pokemonsList\nexport const getPokemonTypes = (state: RootState) => state.listOfPokemons.pokemonsType\n\nexport default listOfPokemonsSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport { PokemonsDataToDisplayState } from '../../types/pokemon.model'\n\nconst initialState: PokemonsDataToDisplayState = {\n  filterQuery: '',\n  qtyPerPage: 10,\n}\n\nexport const pokemonsDataToDisplaySlice = createSlice({\n  name: 'pokemonsDataToDisplay',\n  initialState,\n  reducers: {\n    setFilterQuery: (state, action) => {\n      state.filterQuery = action.payload\n    },\n    setQtyPerPage: (state, action) => {\n      state.qtyPerPage = action.payload\n    },\n  },\n})\n\nexport const { setFilterQuery, setQtyPerPage } = pokemonsDataToDisplaySlice.actions\nexport const getFilterQuery = (state: RootState) => state.pokemonsDataToDisplay.filterQuery\nexport const getQtyPerPage = (state: RootState) => state.pokemonsDataToDisplay.qtyPerPage\n\nexport default pokemonsDataToDisplaySlice.reducer\n","import { Button, Card, CardContent, CardMedia, Chip, Collapse, Grid, Stack, Typography } from '@mui/material'\nimport React, { useState } from 'react'\nimport { pokemonData } from '../../types/pokemon.model'\nimport { nanoid } from 'nanoid'\n\ntype Props = {\n  data: pokemonData;\n};\n\nconst colorForType: { [key: string] : string } = {\n  normal: '#a4acaf',\n  fighting: '#d56723',\n  flying: '#3dc7ef',\n  poison: '#b97fc9',\n  ground: '#ab9842',\n  rock: '#a38c21',\n  bug: '#729f3f',\n  ghost: '#51c4e7',\n  steel: '#9eb7b8',\n  fire: '#fd7d24',\n  water: '#4592c4',\n  grass: '#9bcc50',\n  electric: '#eed535',\n  psychic: '#f366b9',\n  ice: '#51c4e7',\n  dragon: '#f16e57',\n  dark: '#707070',\n  fairy: '#fdb9e9',\n  unknown: '#ffffff',\n  shadow: '#ffffff',\n}\n\nconst PokemonCard: React.FC<Props> = ({ data }) => {\n  const { name, types, image, hp, attack, defense, specialAttack, specialDefense, speed, weight } = data\n  const [expanded, setExpanded] = useState(false)\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded)\n  }\n\n  return (\n    <>\n      <Grid item xs={12} md={4} lg={3}>\n        <Card>\n          <CardMedia\n            component=\"img\"\n            height=\"240px\"\n            image={image}\n            alt={name}\n            title={name}\n          />\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"div\">\n              {name}\n            </Typography>\n            <Stack direction=\"row\" spacing={1} sx={{ mb: 1 }}>\n              {types.map(type => (<Chip label={type} size=\"small\" key={nanoid()} sx={{ bgcolor: `${colorForType[type]}` }}/>))}\n            </Stack>\n            <Typography\n              variant=\"body2\"\n              color=\"text.secondary\"\n              gutterBottom\n            >\n              HP: {hp}\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              color=\"text.secondary\"\n              gutterBottom\n            >\n              Attack: {attack}\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              color=\"text.secondary\"\n              gutterBottom\n            >\n              Defense: {defense}\n            </Typography>\n            <Button\n              onClick={handleExpandClick}\n            >\n              more stats\n            </Button>\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n              <CardContent>\n                <Typography\n                  variant=\"body2\"\n                  color=\"text.secondary\"\n                  gutterBottom\n                >\n                  Special Attack: {specialAttack}\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  color=\"text.secondary\"\n                  gutterBottom\n                >\n                  Special Defense: {specialDefense}\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  color=\"text.secondary\"\n                  gutterBottom\n                >\n                  Speed: {speed}\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  color=\"text.secondary\"\n                  gutterBottom\n                >\n                  Weight: {weight}\n                </Typography>\n              </CardContent>\n            </Collapse>\n          </CardContent>\n        </Card>\n      </Grid>\n    </>\n  )\n}\n\nexport default PokemonCard\n","import React, { useEffect, useState } from 'react'\n\nimport { Container, Grid, Pagination, Stack } from '@mui/material'\nimport { useAppSelector } from '../../app/hooks'\nimport { getPokemonsList } from '../../features/listOfPokemons/listOfPokemonsSlice'\nimport { getFilterQuery, getQtyPerPage } from '../../features/pokemonsDataToDisplay/pokemonsDataToDisplay'\nimport { pokemonData, pokemonListItem } from '../../types/pokemon.model'\nimport { fetchPokemonStats } from '../../api/api'\nimport PokemonCard from '../PokemonCard/PokemonCard'\n\nconst PokemonCardList: React.FC = () => {\n  const filterQuery = useAppSelector(getFilterQuery)\n  const pokemonsListFromServer = useAppSelector(getPokemonsList)\n  const pokemonsPerPage = useAppSelector(getQtyPerPage)\n\n  const [page, setPage] = useState(0)\n  const [pageQty, setPageQty] = useState(0)\n  const [filteredByName, setFilteredByName] = useState(pokemonsListFromServer)\n  const [pokemonsToDisplayData, setPokemonsToDisplayData] = useState<pokemonData[] | []>([])\n\n  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\n    setPage(value)\n  }\n\n  useEffect(() => {\n    const preparedList = pokemonsListFromServer.filter((pokemon: pokemonListItem) => pokemon.name.includes(filterQuery))\n    setFilteredByName(preparedList)\n  }, [pokemonsListFromServer, filterQuery])\n\n  useEffect(() => {\n    setPageQty(Math.floor(filteredByName.length / pokemonsPerPage))\n  }, [filteredByName, pokemonsPerPage])\n\n  useEffect(async () => {\n    const preparedPokemonsToDisplay = filteredByName.slice(page * pokemonsPerPage, page * pokemonsPerPage + pokemonsPerPage)\n\n    let listOfDataToDisplay: any[] = []\n\n    for (const pokemon of preparedPokemonsToDisplay) {\n      const response = await fetchPokemonStats(pokemon.name)\n      listOfDataToDisplay = [...listOfDataToDisplay, response.data]\n    }\n\n    listOfDataToDisplay = listOfDataToDisplay.map(pokemon => ({\n      id: pokemon.id,\n      name: pokemon.name,\n      types: pokemon.types.map((type) => type.type.name),\n      moves: pokemon.moves.map((move) => move.move.name),\n      image: pokemon.sprites.front_default,\n      hp: pokemon.stats[0].base_stat,\n      attack: pokemon.stats[1].base_stat,\n      defense: pokemon.stats[2].base_stat,\n      specialAttack: pokemon.stats[3].base_stat,\n      specialDefense: pokemon.stats[4].base_stat,\n      speed: pokemon.stats[5].base_stat,\n      weight: pokemon.weight,\n    }))\n\n    setPokemonsToDisplayData(listOfDataToDisplay)\n  }, [page, pokemonsPerPage, filteredByName])\n\n  return (\n    <>\n    <Container>\n      <Stack\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        spacing={0}\n      >\n        <Pagination\n          count={pageQty}\n          page={page}\n          color=\"primary\"\n          size=\"large\"\n          shape=\"rounded\"\n          variant=\"outlined\"\n          onChange={handleChange}\n        />\n      </Stack>\n      <Grid container\n        spacing={1}\n        sx={{ p: '45px' }}\n      >\n        {pokemonsToDisplayData.map((pokemon: pokemonData) => (\n          <PokemonCard\n            key={pokemon.id}\n            data={pokemon}\n          />\n        ))}\n      </Grid>\n    </Container>\n    </>\n  )\n}\n\nexport default PokemonCardList\n","import React, { ChangeEvent, useCallback, useEffect, useState } from 'react'\nimport { Container, FormControl, FormHelperText, Grid, InputLabel, MenuItem, OutlinedInput, Select, SelectChangeEvent, TextField } from '@mui/material'\nimport { fetchTypesList } from '../../api/api'\nimport { setPokemonsType } from '../../features/listOfPokemons/listOfPokemonsSlice'\nimport { useAppDispatch } from '../../app/hooks'\nimport { setFilterQuery, setQtyPerPage } from '../../features/pokemonsDataToDisplay/pokemonsDataToDisplay'\nimport { debounce } from '../../app/common'\nimport { TypeFormServer } from '../../types/pokemon.model'\n\nconst PokemonCardListControllBar: React.FC = () => {\n  const dispatch = useAppDispatch()\n\n  const [typesList, setTypesList] = useState<TypeFormServer[]>([])\n  const [selectedTypesList, setSelectedTypesList] = useState<string[]>([])\n  const [pokemonsPerPage, setPokemonsPerPage] = useState(10)\n  const [query, setQuery] = useState('')\n\n  const typeSelectorHandler = (event: SelectChangeEvent<string[]>) => {\n    setSelectedTypesList(event.target.value)\n    dispatch(setPokemonsType(event.target.value))\n  }\n\n  const paginationSelectorHandler = (event: SelectChangeEvent<number>) => {\n    setPokemonsPerPage(+event.target.value)\n    dispatch(setQtyPerPage(+event.target.value))\n  }\n\n  const dispatchQuery = (query: string) => {\n    dispatch(setFilterQuery(query))\n  }\n\n  const debounceDispatchQuery = useCallback(\n    debounce(dispatchQuery, 300),\n    [])\n\n  const inputQueryHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n    debounceDispatchQuery(event.target.value)\n  }\n\n  useEffect(async () => {\n    const response = await fetchTypesList()\n    const listOfTypesFromServer = await response.data.results.map((item: TypeFormServer) => (\n      {\n        name: item.name,\n        typeIndex: item.url.split('/').slice(-2, -1),\n      }\n    ))\n\n    setTypesList(listOfTypesFromServer)\n  },\n  [])\n\n  return (\n    <>\n      <Container>\n        <Grid container spacing={2}>\n          <Grid item xs={12} md={6}>\n            <FormControl sx={{ m: 1, width: '100%' }} >\n              <TextField\n                id=\"standard-basic\"\n                label=\"Search by name\"\n                onChange={inputQueryHandler}\n                value={query}\n              />\n              <FormHelperText>\n                Filter pokemons by name\n              </FormHelperText>\n            </FormControl>\n          </Grid>\n          <Grid item xs={6} md={4}>\n            <FormControl sx={{ m: 1, width: '100%' }}>\n              <InputLabel id=\"inputTypeSelectLabel\">\n                Type\n              </InputLabel>\n              <Select\n                labelId=\"inputTypeSelectLabel\"\n                id=\"inputTypeSelect\"\n                multiple\n                value={selectedTypesList}\n                label=\"Type\"\n                input={<OutlinedInput label=\"Type\" />}\n                onChange={typeSelectorHandler}\n              >\n                {typesList.map(({ name }) => (\n                  <MenuItem value={name} key={name}>\n                    {name}\n                  </MenuItem>\n                ))\n                }\n              </Select>\n              <FormHelperText>\n                Filter pokemons by type\n              </FormHelperText>\n            </FormControl>\n          </Grid>\n          <Grid item xs={6} md={2}>\n            <FormControl sx={{ m: 1, width: '100%' }}>\n              <InputLabel id=\"labelForPaginationSelect\">\n                Pokemons per page\n              </InputLabel>\n              <Select\n                labelId=\"labelForPaginationSelect\"\n                id=\"PaginationSelect\"\n                value={pokemonsPerPage}\n                label=\"PokemonsPerPage\"\n                onChange={paginationSelectorHandler}\n              >\n                <MenuItem value={10} >\n                  10\n                </MenuItem>\n                <MenuItem value={20} >\n                  20\n                </MenuItem>\n                <MenuItem value={50} >\n                  50\n                </MenuItem>\n              </Select>\n              <FormHelperText>\n                Pokemons per page\n              </FormHelperText>\n            </FormControl>\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  )\n}\n\nexport default PokemonCardListControllBar\n","export function debounce (f: { (query: string): void; (...args: any[]): void; }, delay: number) {\n  let timer: ReturnType<typeof setTimeout>\n\n  return (...args: any[]) => {\n    clearTimeout(timer)\n\n    timer = setTimeout(f, delay, ...args)\n  }\n}\n","import React, { useEffect } from 'react'\nimport { useAppDispatch, useAppSelector } from './app/hooks'\nimport PokemonCardList from './components/PokemonCardList/PokemonCardList'\nimport PokemonCardListControllBar from './components/PokemonCardListControllBar/PokemonCardListControllBar'\nimport { fetchAsyncListOfPokemons, getPokemonTypes } from './features/listOfPokemons/listOfPokemonsSlice'\n\nfunction App () {\n  const pokemonsTypes = useAppSelector(getPokemonTypes)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchAsyncListOfPokemons(pokemonsTypes))\n  }, [dispatch, pokemonsTypes])\n\n  return (\n    <div className=\"App\">\n      <PokemonCardListControllBar />\n      <PokemonCardList />\n    </div>\n  )\n}\n\nexport default App\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport listOfPokemonsReducer from '../features/listOfPokemons/listOfPokemonsSlice'\nimport pokemonsDataToDisplayReducer from '../features/pokemonsDataToDisplay/pokemonsDataToDisplay'\n\nexport const store = configureStore({\n  reducer: {\n    listOfPokemons: listOfPokemonsReducer,\n    pokemonsDataToDisplay: pokemonsDataToDisplayReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport CssBaseline from '@mui/material/CssBaseline'\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}